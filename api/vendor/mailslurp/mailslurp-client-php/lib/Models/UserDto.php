<?php
/**
 * UserDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  MailSlurp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MailSlurp\Models;

use \ArrayAccess;
use \MailSlurp\ObjectSerializer;

/**
 * UserDto Class Doc Comment
 *
 * @category Class
 * @description Representation a user&#39;s account
 * @package  MailSlurp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class UserDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'UserDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'api_key' => 'string',
        'email_address' => 'string',
        'email_address_md5' => 'string',
        'created' => '\DateTime',
        'user_type' => 'string',
        'organization' => 'string',
        'verified' => 'string',
        'has_password' => 'bool',
        'is_frozen' => 'bool',
        'add_new_contacts' => 'bool',
        'sso_provider' => 'string',
        'customer_id' => 'string',
        'has_onboarded' => 'bool',
        'imap_username' => 'string',
        'imap_password' => 'string',
        'smtp_username' => 'string',
        'smtp_password' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'api_key' => null,
        'email_address' => null,
        'email_address_md5' => null,
        'created' => 'date-time',
        'user_type' => null,
        'organization' => 'uuid',
        'verified' => null,
        'has_password' => null,
        'is_frozen' => null,
        'add_new_contacts' => null,
        'sso_provider' => null,
        'customer_id' => null,
        'has_onboarded' => null,
        'imap_username' => null,
        'imap_password' => null,
        'smtp_username' => null,
        'smtp_password' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'api_key' => 'apiKey',
        'email_address' => 'emailAddress',
        'email_address_md5' => 'emailAddressMd5',
        'created' => 'created',
        'user_type' => 'userType',
        'organization' => 'organization',
        'verified' => 'verified',
        'has_password' => 'hasPassword',
        'is_frozen' => 'isFrozen',
        'add_new_contacts' => 'addNewContacts',
        'sso_provider' => 'ssoProvider',
        'customer_id' => 'customerId',
        'has_onboarded' => 'hasOnboarded',
        'imap_username' => 'imapUsername',
        'imap_password' => 'imapPassword',
        'smtp_username' => 'smtpUsername',
        'smtp_password' => 'smtpPassword'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'api_key' => 'setApiKey',
        'email_address' => 'setEmailAddress',
        'email_address_md5' => 'setEmailAddressMd5',
        'created' => 'setCreated',
        'user_type' => 'setUserType',
        'organization' => 'setOrganization',
        'verified' => 'setVerified',
        'has_password' => 'setHasPassword',
        'is_frozen' => 'setIsFrozen',
        'add_new_contacts' => 'setAddNewContacts',
        'sso_provider' => 'setSsoProvider',
        'customer_id' => 'setCustomerId',
        'has_onboarded' => 'setHasOnboarded',
        'imap_username' => 'setImapUsername',
        'imap_password' => 'setImapPassword',
        'smtp_username' => 'setSmtpUsername',
        'smtp_password' => 'setSmtpPassword'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'api_key' => 'getApiKey',
        'email_address' => 'getEmailAddress',
        'email_address_md5' => 'getEmailAddressMd5',
        'created' => 'getCreated',
        'user_type' => 'getUserType',
        'organization' => 'getOrganization',
        'verified' => 'getVerified',
        'has_password' => 'getHasPassword',
        'is_frozen' => 'getIsFrozen',
        'add_new_contacts' => 'getAddNewContacts',
        'sso_provider' => 'getSsoProvider',
        'customer_id' => 'getCustomerId',
        'has_onboarded' => 'getHasOnboarded',
        'imap_username' => 'getImapUsername',
        'imap_password' => 'getImapPassword',
        'smtp_username' => 'getSmtpUsername',
        'smtp_password' => 'getSmtpPassword'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const USER_TYPE_SOLO = 'SOLO';
    const USER_TYPE_CHILD_SOLO = 'CHILD_SOLO';
    const USER_TYPE_CHILD_TEAM = 'CHILD_TEAM';
    const VERIFIED_VERIFIED = 'VERIFIED';
    const VERIFIED_PENDING = 'PENDING';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUserTypeAllowableValues()
    {
        return [
            self::USER_TYPE_SOLO,
            self::USER_TYPE_CHILD_SOLO,
            self::USER_TYPE_CHILD_TEAM,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getVerifiedAllowableValues()
    {
        return [
            self::VERIFIED_VERIFIED,
            self::VERIFIED_PENDING,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['api_key'] = isset($data['api_key']) ? $data['api_key'] : null;
        $this->container['email_address'] = isset($data['email_address']) ? $data['email_address'] : null;
        $this->container['email_address_md5'] = isset($data['email_address_md5']) ? $data['email_address_md5'] : null;
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
        $this->container['user_type'] = isset($data['user_type']) ? $data['user_type'] : null;
        $this->container['organization'] = isset($data['organization']) ? $data['organization'] : null;
        $this->container['verified'] = isset($data['verified']) ? $data['verified'] : null;
        $this->container['has_password'] = isset($data['has_password']) ? $data['has_password'] : null;
        $this->container['is_frozen'] = isset($data['is_frozen']) ? $data['is_frozen'] : null;
        $this->container['add_new_contacts'] = isset($data['add_new_contacts']) ? $data['add_new_contacts'] : null;
        $this->container['sso_provider'] = isset($data['sso_provider']) ? $data['sso_provider'] : null;
        $this->container['customer_id'] = isset($data['customer_id']) ? $data['customer_id'] : null;
        $this->container['has_onboarded'] = isset($data['has_onboarded']) ? $data['has_onboarded'] : null;
        $this->container['imap_username'] = isset($data['imap_username']) ? $data['imap_username'] : null;
        $this->container['imap_password'] = isset($data['imap_password']) ? $data['imap_password'] : null;
        $this->container['smtp_username'] = isset($data['smtp_username']) ? $data['smtp_username'] : null;
        $this->container['smtp_password'] = isset($data['smtp_password']) ? $data['smtp_password'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['api_key'] === null) {
            $invalidProperties[] = "'api_key' can't be null";
        }
        if ($this->container['email_address'] === null) {
            $invalidProperties[] = "'email_address' can't be null";
        }
        if ($this->container['email_address_md5'] === null) {
            $invalidProperties[] = "'email_address_md5' can't be null";
        }
        $allowedValues = $this->getUserTypeAllowableValues();
        if (!is_null($this->container['user_type']) && !in_array($this->container['user_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'user_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getVerifiedAllowableValues();
        if (!is_null($this->container['verified']) && !in_array($this->container['verified'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'verified', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['has_password'] === null) {
            $invalidProperties[] = "'has_password' can't be null";
        }
        if ($this->container['is_frozen'] === null) {
            $invalidProperties[] = "'is_frozen' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets api_key
     *
     * @return string
     */
    public function getApiKey()
    {
        return $this->container['api_key'];
    }

    /**
     * Sets api_key
     *
     * @param string $api_key api_key
     *
     * @return $this
     */
    public function setApiKey($api_key)
    {
        $this->container['api_key'] = $api_key;

        return $this;
    }

    /**
     * Gets email_address
     *
     * @return string
     */
    public function getEmailAddress()
    {
        return $this->container['email_address'];
    }

    /**
     * Sets email_address
     *
     * @param string $email_address email_address
     *
     * @return $this
     */
    public function setEmailAddress($email_address)
    {
        $this->container['email_address'] = $email_address;

        return $this;
    }

    /**
     * Gets email_address_md5
     *
     * @return string
     */
    public function getEmailAddressMd5()
    {
        return $this->container['email_address_md5'];
    }

    /**
     * Sets email_address_md5
     *
     * @param string $email_address_md5 email_address_md5
     *
     * @return $this
     */
    public function setEmailAddressMd5($email_address_md5)
    {
        $this->container['email_address_md5'] = $email_address_md5;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime|null
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime|null $created created
     *
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets user_type
     *
     * @return string|null
     */
    public function getUserType()
    {
        return $this->container['user_type'];
    }

    /**
     * Sets user_type
     *
     * @param string|null $user_type user_type
     *
     * @return $this
     */
    public function setUserType($user_type)
    {
        $allowedValues = $this->getUserTypeAllowableValues();
        if (!is_null($user_type) && !in_array($user_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'user_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['user_type'] = $user_type;

        return $this;
    }

    /**
     * Gets organization
     *
     * @return string|null
     */
    public function getOrganization()
    {
        return $this->container['organization'];
    }

    /**
     * Sets organization
     *
     * @param string|null $organization Does user belong to an organization
     *
     * @return $this
     */
    public function setOrganization($organization)
    {
        $this->container['organization'] = $organization;

        return $this;
    }

    /**
     * Gets verified
     *
     * @return string|null
     */
    public function getVerified()
    {
        return $this->container['verified'];
    }

    /**
     * Sets verified
     *
     * @param string|null $verified Has user accepted an organization invite
     *
     * @return $this
     */
    public function setVerified($verified)
    {
        $allowedValues = $this->getVerifiedAllowableValues();
        if (!is_null($verified) && !in_array($verified, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'verified', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['verified'] = $verified;

        return $this;
    }

    /**
     * Gets has_password
     *
     * @return bool
     */
    public function getHasPassword()
    {
        return $this->container['has_password'];
    }

    /**
     * Sets has_password
     *
     * @param bool $has_password has_password
     *
     * @return $this
     */
    public function setHasPassword($has_password)
    {
        $this->container['has_password'] = $has_password;

        return $this;
    }

    /**
     * Gets is_frozen
     *
     * @return bool
     */
    public function getIsFrozen()
    {
        return $this->container['is_frozen'];
    }

    /**
     * Sets is_frozen
     *
     * @param bool $is_frozen is_frozen
     *
     * @return $this
     */
    public function setIsFrozen($is_frozen)
    {
        $this->container['is_frozen'] = $is_frozen;

        return $this;
    }

    /**
     * Gets add_new_contacts
     *
     * @return bool|null
     */
    public function getAddNewContacts()
    {
        return $this->container['add_new_contacts'];
    }

    /**
     * Sets add_new_contacts
     *
     * @param bool|null $add_new_contacts add_new_contacts
     *
     * @return $this
     */
    public function setAddNewContacts($add_new_contacts)
    {
        $this->container['add_new_contacts'] = $add_new_contacts;

        return $this;
    }

    /**
     * Gets sso_provider
     *
     * @return string|null
     */
    public function getSsoProvider()
    {
        return $this->container['sso_provider'];
    }

    /**
     * Sets sso_provider
     *
     * @param string|null $sso_provider sso_provider
     *
     * @return $this
     */
    public function setSsoProvider($sso_provider)
    {
        $this->container['sso_provider'] = $sso_provider;

        return $this;
    }

    /**
     * Gets customer_id
     *
     * @return string|null
     */
    public function getCustomerId()
    {
        return $this->container['customer_id'];
    }

    /**
     * Sets customer_id
     *
     * @param string|null $customer_id customer_id
     *
     * @return $this
     */
    public function setCustomerId($customer_id)
    {
        $this->container['customer_id'] = $customer_id;

        return $this;
    }

    /**
     * Gets has_onboarded
     *
     * @return bool|null
     */
    public function getHasOnboarded()
    {
        return $this->container['has_onboarded'];
    }

    /**
     * Sets has_onboarded
     *
     * @param bool|null $has_onboarded has_onboarded
     *
     * @return $this
     */
    public function setHasOnboarded($has_onboarded)
    {
        $this->container['has_onboarded'] = $has_onboarded;

        return $this;
    }

    /**
     * Gets imap_username
     *
     * @return string|null
     */
    public function getImapUsername()
    {
        return $this->container['imap_username'];
    }

    /**
     * Sets imap_username
     *
     * @param string|null $imap_username imap_username
     *
     * @return $this
     */
    public function setImapUsername($imap_username)
    {
        $this->container['imap_username'] = $imap_username;

        return $this;
    }

    /**
     * Gets imap_password
     *
     * @return string|null
     */
    public function getImapPassword()
    {
        return $this->container['imap_password'];
    }

    /**
     * Sets imap_password
     *
     * @param string|null $imap_password imap_password
     *
     * @return $this
     */
    public function setImapPassword($imap_password)
    {
        $this->container['imap_password'] = $imap_password;

        return $this;
    }

    /**
     * Gets smtp_username
     *
     * @return string|null
     */
    public function getSmtpUsername()
    {
        return $this->container['smtp_username'];
    }

    /**
     * Sets smtp_username
     *
     * @param string|null $smtp_username smtp_username
     *
     * @return $this
     */
    public function setSmtpUsername($smtp_username)
    {
        $this->container['smtp_username'] = $smtp_username;

        return $this;
    }

    /**
     * Gets smtp_password
     *
     * @return string|null
     */
    public function getSmtpPassword()
    {
        return $this->container['smtp_password'];
    }

    /**
     * Sets smtp_password
     *
     * @param string|null $smtp_password smtp_password
     *
     * @return $this
     */
    public function setSmtpPassword($smtp_password)
    {
        $this->container['smtp_password'] = $smtp_password;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


